AWSTemplateFormatVersion: '2010-09-09'
Description: "Swintt - Test Victor Pacheco - Api for crud notes."

Parameters:
  CognitoUserPoolId:
    Type: String
    Description: 'The ID of the existing Cognito User Pool'
    Default: eu-west-1_C36FXCbyo
  lambdaS3Bucket:
    Type: String
  lambdaS3Key:
    Type: String
  DynamoDBTableName:
    Type: String
    Default: 'swintt-test-victor-pacheco-items'

Resources:
  SwinttTestVictorPachecoApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'SwinttTestVictorPachecoApi'

  SwinttTestVictorPachecoApiGatewayResourceNotes:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt SwinttTestVictorPachecoApiGatewayRestApi.RootResourceId
      PathPart: 'notes'
      RestApiId: !Ref SwinttTestVictorPachecoApiGatewayRestApi

  SwinttTestVictorPachecoApiGatewayResourceNotesId:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SwinttTestVictorPachecoApiGatewayResourceNotes
      PathPart: '{id+}'
      RestApiId: !Ref SwinttTestVictorPachecoApiGatewayRestApi

  SwinttTestVictorPachecoApiGatewayAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      Name: 'SwinttTestVictorPachecoAuthorizer'
      Type: 'COGNITO_USER_POOLS'
      IdentitySource: 'method.request.header.Authorization'
      ProviderARNs:
        - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
      RestApiId: !Ref SwinttTestVictorPachecoApiGatewayRestApi

  SwinttTestVictorPachecoLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'SwinttTestVictorPachecoLambdaFunction'
      Handler: 'app.handler'
      Role: !GetAtt SwinttTestVictorPachecoLambdaExecutionRole.Arn
      Runtime: 'nodejs20.x'
      Code:
        S3Bucket: !Ref lambdaS3Bucket
        S3Key: !Ref lambdaS3Key
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName

  SwinttTestVictorPachecoLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'SwinttTestVictorPachecoLambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Query'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:Query'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}/index/UserIndex'

  SwinttTestVictorPachecoDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref DynamoDBTableName
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
        - AttributeName: 'user'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      GlobalSecondaryIndexes:
        - IndexName: 'UserIndex'
          KeySchema:
            - AttributeName: 'user'
              KeyType: 'HASH'
          Projection:
            ProjectionType: 'ALL'

  SwinttTestVictorPachecoApiGatewayMethodPostNotes:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref SwinttTestVictorPachecoApiGatewayAuthorizer
      HttpMethod: 'POST'
      ResourceId: !Ref SwinttTestVictorPachecoApiGatewayResourceNotes
      RestApiId: !Ref SwinttTestVictorPachecoApiGatewayRestApi
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SwinttTestVictorPachecoLambdaFunction.Arn}/invocations

  SwinttTestVictorPachecoApiGatewayMethodGetNotes:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref SwinttTestVictorPachecoApiGatewayAuthorizer
      HttpMethod: 'GET'
      ResourceId: !Ref SwinttTestVictorPachecoApiGatewayResourceNotes
      RestApiId: !Ref SwinttTestVictorPachecoApiGatewayRestApi
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SwinttTestVictorPachecoLambdaFunction.Arn}/invocations

  SwinttTestVictorPachecoApiGatewayMethodAnyNotesById:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref SwinttTestVictorPachecoApiGatewayAuthorizer
      HttpMethod: 'ANY'
      ResourceId: !Ref SwinttTestVictorPachecoApiGatewayResourceNotesId
      RestApiId: !Ref SwinttTestVictorPachecoApiGatewayRestApi
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SwinttTestVictorPachecoLambdaFunction.Arn}/invocations

  SwinttTestVictorPachecoApiGatewayOptionsMethodNotes:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      ResourceId: !Ref SwinttTestVictorPachecoApiGatewayResourceNotes
      RestApiId: !Ref SwinttTestVictorPachecoApiGatewayRestApi
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"

  SwinttTestVictorPachecoApiGatewayOptionsMethodNotesById:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'OPTIONS'
      ResourceId: !Ref SwinttTestVictorPachecoApiGatewayResourceNotesId
      RestApiId: !Ref SwinttTestVictorPachecoApiGatewayRestApi
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"

  SwinttTestVictorPachecoLambdaInvokePermissionApiGateway:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref SwinttTestVictorPachecoLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SwinttTestVictorPachecoApiGatewayRestApi}/*/*/*

  SwinttTestVictorPachecoApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref SwinttTestVictorPachecoApiGatewayRestApi
      StageName: 'v1'
    DependsOn:
      - SwinttTestVictorPachecoApiGatewayMethodPostNotes
      - SwinttTestVictorPachecoApiGatewayMethodGetNotes
      - SwinttTestVictorPachecoApiGatewayMethodAnyNotesById
      - SwinttTestVictorPachecoApiGatewayOptionsMethodNotes
      - SwinttTestVictorPachecoApiGatewayOptionsMethodNotesById

Outputs:
  ApiUrl:
    Description: 'API URL'
    Value:
      Fn::Sub: 'https://${SwinttTestVictorPachecoApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/v1/notes'
